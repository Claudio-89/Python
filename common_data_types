### STRINGS ###

>>> "pass" + "word"
'password'
>>> "Ha" * 4
'HaHaHaHa'
>>> "double".find('s')
-1
>>> "double".find('u')
2
>>> "double".find('bl')
3
>>> "TeStInG".lower()
'testing'
>>> "PassWord123".lower()
'password123'
>>> print("Tab\tDelimited")
Tab	Delimited
>>> print("New\nLine")
New
Line
>>> print("Slash\\Character")
Slash\Character
>>> print("'Single' in Double")
'Single' in Double
>>> print('"Double" in Single')
"Double" in Single
>>> print("\"Double\" in Double")
"Double" in Double

### NUMBERS (int and float) ###

>>> 2 + 2 # Addition
4
>>> 10 - 4 # Subtraction
6
>>> 3 * 9 # Multiplication
27
>>> 5 / 3 # Division
1.66666666666667
>>> 5 // 3 # Floor division, always returns a number without a remainder
1
>>> 8 % 3 # Modulo division, returns the remainder
2
>>> 2 ** 3 # Exponent (2*2*2)
8

# For strings and numbers, we can use the str, int, and float functions to convert from one type to another

>>> str(1.1)
'1.1'
>>> int("10")
10
>>> int(5.99999)
5
>>> float("5.6")
5.6
>>> float(5)
5.0

# You’ll run into issues trying to convert strings to other types if they aren’t present in the string

>>> float("1.1 things")
Traceback (most recent call last):
  File "", line 1, in 
ValueError: could not convert string to float: '1.1 things'

### BOOLEANS and NONE ###
# Python has two boolean constants: True and False

>>> True
True
>>> type(True)
<class 'bool'>
>>> False
False
>>> type(False)
<class 'bool'>
>>> bool({})
False
>>> bool("")
False
>>> bool("Claudio")
True
>>> None # The constant used to represent nothingness in Python is None. None is a “falsy”, and we’ll often use it to represent when a variable has no value yet.


### VARIABLES ###

>>> my_str = "simple string"
>>> my_str
'simple string'
>>> print(my_str)
simple string
>>> my_str += " testing"
>>> my_str
'simple string testing'
>>> my_str = my_str + " testing2"
>>> my_str
'simple string testing testing2'

### LISTS ### 

>>> my_list = [1, 2, 3, 4, 5]
>>> my_list
[1, 2, 3, 4, 5]
>>> [1, 'a', True]
[1, 'a', True]
>>> my_list[0]
1
>>> len(my_list)
5
>>> my_list[-1]
5
>>> my_list[-4]
2
>>> my_list[0:2]
[1, 2]
>>> my_list[1:]
[2, 3, 4, 5]
>>> my_list[0::1]
[1, 2, 3, 4, 5]
>>> my_list[0::2]
[1, 3, 5]
>>> my_list[0] = "a"
>>> my_list
['a', 2, 3, 4, 5]
>>> my_list.append(6)
>>> my_list.append(7)
>>> my_list
['a', 2, 3, 4, 5, 6, 7]
>>> my_list + [8, 9, 10]
['a', 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> my_list
['a', 2, 3, 4, 5, 6, 7]
>>> my_list += [8, 9, 10]
>>> my_list
['a', 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> my_list[1:3] = ['b', 'c']
>>> my_list
['a', 'b', 'c', 4, 5, 6, 7, 8, 9, 10]
>>> my_list[3:5] = ['d', 'e', 'f']
>>> my_list
['a', 'b', 'c', 'd', 'e', 'f', 6, 7, 8, 9, 10]
>>> my_list = ['a', 'b', 'c', 'd', 5, 6, 7]
>>> my_list[4:] = []
>>> my_list
['a', 'b', 'c', 'd']
>>> my_list.remove('b')
>>> my_list
['a', 'c', 'd']
>>> my_list.pop()
'd'
>>> my_list
['a', 'c']
>>> my_list.pop(0)
'a'
>>> my_list
['c']
>>>

### TUPLES ###
# Tuples are a fixed width, immutable sequence type. We create tuples using parenthesis ( and ) and at least one comma (,)

>>> point = (2.0, 3.0)
>>> point_3d = point + (4.0,)
>>> point_3d
(2.0, 3.0, 4.0)
>>> x, y, z = point_3d
>>> x
2.0
>>> y
3.0
>>> z
4.0
>>>

### DICTIONARIES (DICTS) ###

>>> ages = { 'kevin': 59, 'alex': 29, 'bob': 40 }
>>> ages
{'alex': 29, 'kevin': 59, 'bob': 40}
>>> ages['kevin']
59
>>> ages['kayla'] = 21
>>> ages
{'alex': 29, 'kevin': 59, 'bob': 40, 'kayla': 21}
>>> ages['kayla'] = 22 # Keys are unique
>>> ages
{'alex': 29, 'kevin': 59, 'bob': 40, 'kayla': 22}
>>> del ages['kevin']
>>> ages
{'alex': 29, 'bob': 40, 'kayla': 22}
>>> del ages
>>> ages
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ages' is not defined
>>> ages = { 'kevin': 59, 'alex': 29, 'bob': 40 }
>>> ages.pop('alex')
29
>>> ages
{'kevin': 59, 'bob': 40}
>>> ages.keys()
dict_keys(['kevin', 'bob'])
>>> list(ages.keys())
['kevin', 'bob']
>>> ages.values()
dict_values([59, 40])
>>> list(ages.values())
[59, 40]
>>> weights = dict(kevin=160, bob=240, kayla=135)
>>> weights
{'kevin': 160, 'kayla': 135, 'bob': 240}
>>> colors = dict([('kevin', 'blue'), ('bob', 'green'), ('kayla', 'red')])
>>> colors
{'kevin': 'blue', 'bob': 'green', 'kayla': 'red'}

